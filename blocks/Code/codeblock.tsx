"use client";

import { Check, Copy } from "lucide-react";
import { Icon } from "@iconify/react";
import {
  type ButtonHTMLAttributes,
  type HTMLAttributes,
  type ReactNode,
  forwardRef,
  useCallback,
  useRef,
  useState,
  useLayoutEffect,
  Children,
  cloneElement,
  isValidElement,
} from "react";
import {
  ScrollArea,
  ScrollBar,
  ScrollViewport,
} from "@/components/ui/scroll-area";
import { buttonVariants } from "@/components/ui/button";
import type { ScrollAreaViewportProps } from "@radix-ui/react-scroll-area";
import { cn } from "@/lib/utils";
import { useCopyButton } from "@/lib/use-copy-button";
import { motion } from "framer-motion";

export type CodeBlockProps = HTMLAttributes<HTMLElement> & {
  /**
   * Icon of code block
   *
   * When passed as a string, it assumes the value is the HTML of icon
   */
  icon?: ReactNode;

  /**
   * Allow to copy code with copy button
   *
   * @defaultValue true
   */
  allowCopy?: boolean;

  /**
   * Keep original background color generated by Shiki or Rehype Code
   *
   * @defaultValue false
   */
  keepBackground?: boolean;

  viewportProps?: ScrollAreaViewportProps;
};

export const Pre = forwardRef<HTMLPreElement, HTMLAttributes<HTMLPreElement>>(
  ({ className, ...props }, ref) => {
    return (
      <pre
        ref={ref}
        className={cn("p-4 focus-visible:outline-none", className)}
        {...props}
      >
        {props.children}
      </pre>
    );
  }
);

Pre.displayName = "Pre";

export const CodeBlock = forwardRef<HTMLElement, CodeBlockProps>(
  (
    {
      title,
      allowCopy = true,
      keepBackground = false,
      icon,
      viewportProps,
      children,
      ...props
    },
    ref
  ) => {
    const areaRef = useRef<HTMLDivElement>(null);
    const contentRef = useRef<HTMLPreElement>(null);
    const [isExpanded, setIsExpanded] = useState(false);
    const [shouldCollapse, setShouldCollapse] = useState(true);

    const onCopy = useCallback(() => {
      const pre = areaRef.current?.getElementsByTagName("pre").item(0);

      if (!pre) return;

      const clone = pre.cloneNode(true) as HTMLElement;
      clone.querySelectorAll(".nd-copy-ignore").forEach((node) => {
        node.remove();
      });

      void navigator.clipboard.writeText(clone.textContent ?? "");
    }, []);

    const toggleExpanded = useCallback(() => {
      setIsExpanded(!isExpanded);
    }, [isExpanded]);

    useLayoutEffect(() => {
      if (contentRef.current) {
        const height = contentRef.current.scrollHeight;
        setShouldCollapse(height > 300);
      }
    }, [children]);

    const childWithRef = Children.map(children, (child) => {
      if (isValidElement(child)) {
        return cloneElement(
          child as React.ReactElement<{ ref: React.Ref<HTMLPreElement> }>,
          { ref: contentRef }
        );
      }
      return child;
    });

    return (
      <figure
        ref={ref}
        {...props}
        className={cn(
          "not-prose group bg-[#f5f5f5] p-2 border-[#9e9e9e33]  outline-none not-prose relative my-6 overflow-hidden border  text-sm",

          keepBackground && "bg-(--shiki-light-bg) dark:bg-(--shiki-dark-bg)",
          props.className
        )}
      >
        {title ? (
          <div className="flex flex-row items-center gap-2 border-b bg-fd-muted px-2 py-1.5">
            <figcaption className="flex-1 truncate text-fd-muted-foreground">
              {title}
            </figcaption>
            <div className="flex flex-row items-center gap-2">
              <CopyButton className="-me-2" onCopy={onCopy} />
              {shouldCollapse && (
                <ExpandButton
                  isExpanded={isExpanded}
                  toggleExpanded={toggleExpanded}
                />
              )}
            </div>
          </div>
        ) : (
          allowCopy && (
            <CopyButton
              className="absolute right-2 top-2 z-[2] backdrop-blur-md"
              onCopy={onCopy}
            />
          )
        )}
        <motion.div
          className="overflow-hidden bg-[#EDEDED] border border-[#9e9e9e33]"
          initial={false}
          animate={{
            height:
              shouldCollapse && !isExpanded
                ? 300
                : contentRef.current?.scrollHeight,
          }}
          transition={{
            duration: 0.3,
            ease: "easeInOut",
          }}
        >
          <ScrollArea ref={areaRef} dir="ltr">
            <ScrollViewport {...viewportProps}>{childWithRef}</ScrollViewport>
            <ScrollBar orientation="horizontal" />
          </ScrollArea>
        </motion.div>
        {shouldCollapse && (
          <div
            className={cn(
              "absolute bottom-2  left-0 right-0 flex justify-center   p-1 pt-4"
              // !isExpanded ? "bg-accent/40" : ""
            )}
          >
            <button
              onClick={toggleExpanded}
              className={cn(
                buttonVariants({ color: "ghost", size: "sm" }),
                "w-fit"
              )}
            >
              <Icon
                icon={isExpanded ? "tabler:chevron-up" : "tabler:chevron-down"}
                className="mr-1 h-4 w-4"
              />
              {isExpanded ? "折叠" : "展开"}
            </button>
          </div>
        )}
      </figure>
    );
  }
);

CodeBlock.displayName = "CodeBlock";
function CopyButton({
  className,
  onCopy,
  ...props
}: ButtonHTMLAttributes<HTMLButtonElement> & {
  onCopy: () => void;
}) {
  const [checked, onClick] = useCopyButton(onCopy);

  return (
    <button
      type="button"
      className={cn(
        buttonVariants({
          color: "ghost",
        }),
        "transition-opacity group-hover:opacity-100 [&_svg]:size-3.5",
        // !checked && "[@media(hover:hover)]:opacity-0",
        className
      )}
      aria-label={checked ? "Copied Text" : "Copy Text"}
      onClick={onClick}
      {...props}
    >
      <Check className={cn("transition-transform", !checked && "scale-0")} />
      <Copy
        className={cn("absolute transition-transform", checked && "scale-0")}
      />
    </button>
  );
}

function ExpandButton({
  isExpanded,
  toggleExpanded,
}: {
  isExpanded: boolean;
  toggleExpanded: () => void;
}) {
  return (
    <button onClick={toggleExpanded}>
      <Icon
        icon={isExpanded ? "tabler:chevron-up" : "tabler:chevron-down"}
        className="mr-1 h-4 w-4"
      />
    </button>
  );
}
